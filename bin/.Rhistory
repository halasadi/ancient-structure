ii_presentWell <- which(lcl_qc_data$cell.num > 0)
lcl_qc_data <- lcl_qc_data[iipresentWell,];
lcl_qc_data <- lcl_qc_data[ii_presentWell,];
dim(lcl_qc_data)
lcl_single_cells <- lcl_molecules_refined[which(lcl_qc_data$cell.num==1),];
batch_lab_single_cells <- batch_lab[which(lcl_qc_data$cell.num==1)];
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
## create 5 lists of 5 phases (de-level and then remove "")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
reads_lcl <- data.frame(fread('../data/reads-lcl.txt'),row.names=TRUE);
reads_lcl <- reads_lcl[,lcl_indices];
reads_lcl_single <- reads_lcl[,which(lcl_qc_data$cell.num==1)];
reads_single <- as.matrix(reads_lcl_single)
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
suppressWarnings(cor_matrix <- cor(t(combined_matrix)))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
flexible_normalization <- function(data_in,by_row=TRUE){
if(by_row){
row_mean <- apply(data_in,1,mean)
row_sd   <- apply(data_in,1,sd)
output <- data_in
for(i in 1:dim(data_in)[1]){
output[i,] <- (data_in[i,] - row_mean[i])/row_sd[i]
}
}
#### if by column
if(!by_row){
col_mean <- apply(data_in,2,mean)
col_sd   <- apply(data_in,2,sd)
output <- data_in
for(i in 1:dim(data_in)[2]){
output[,i] <- (data_in[,i] - col_mean[i])/col_sd[i]
}
}
output
}
#### apply the normalization function
## first normalized for each phase
ans_normed <- flexible_normalization(ans,by_row=FALSE)
## then normalized of each cell
ans_normed_normed <- flexible_normalization(ans_normed,by_row=TRUE)
cell_phase <- apply(ans_normed_normed,1,function(x) colnames(cell_cycle_genes)[which.max(x)])
assign_cell_phase <- data.frame(cell_phase)
samp_metadata <- cbind.data.frame(as.vector(as.matrix(cell_phase_vector)));
colnames(samp_metadata) = c("cell_phase");
reads_lcl <- data.frame(fread('../data/reads-lcl.txt'),row.names=TRUE);
reads_lcl <- reads_lcl[,lcl_indices];
reads_lcl_single <- reads_lcl[,which(lcl_qc_data$cell.num==1)];
reads_single <- as.matrix(reads_lcl_single)
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
suppressWarnings(cor_matrix <- cor(t(combined_matrix)))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
flexible_normalization <- function(data_in,by_row=TRUE){
if(by_row){
row_mean <- apply(data_in,1,mean)
row_sd   <- apply(data_in,1,sd)
output <- data_in
for(i in 1:dim(data_in)[1]){
output[i,] <- (data_in[i,] - row_mean[i])/row_sd[i]
}
}
#### if by column
if(!by_row){
col_mean <- apply(data_in,2,mean)
col_sd   <- apply(data_in,2,sd)
output <- data_in
for(i in 1:dim(data_in)[2]){
output[,i] <- (data_in[,i] - col_mean[i])/col_sd[i]
}
}
output
}
#### apply the normalization function
## first normalized for each phase
ans_normed <- flexible_normalization(ans,by_row=FALSE)
## then normalized of each cell
ans_normed_normed <- flexible_normalization(ans_normed,by_row=TRUE)
cell_phase <- apply(ans_normed_normed,1,function(x) colnames(cell_cycle_genes)[which.max(x)])
assign_cell_phase <- data.frame(cell_phase)
cell_phase_vector <- as.vector(as.matrix(assign_cell_phase));
cell_phase_vector <- factor(cell_phase_vector,
levels = c("G1.S", "S", "G2.M", "M", "M.G1"))
length(cell_phase_vector)
samp_metadata <- cbind.data.frame(as.vector(as.matrix(cell_phase_vector)));
colnames(samp_metadata) = c("cell_phase");
nclus_vec <- 2:5;
if(!dir.exists("../figures/lcl_structure_single")) dir.create("../figures/lcl_structure_single")
#StructureObj(lcl_single_cells ,nclus_vec,samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path_rda="../project/rdas/topic_fit_lcl_single.rda",partition=c('TRUE'),path_struct = "../figures/lcl_structure_single");
lcl_topics_single <- get(load("../../project/rdas/topic_fit_lcl_single.rda"));
for(num in 1:length(nclus_vec))
{
obj <- StructureObj_omega(lcl_topics_single[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct='../figures/lcl_structure_single',control=list(cex.axis=1));
}
batch_corrected_lcl_single <- BatchCorrectedCounts(lcl_single_cells,batch_lab_single_cells,use_parallel=TRUE)
StructureObj(lcl_molecules_refined,nclus_vec,samp_metadata = samp_metadata, tol=0.1, batch_lab = NULL, path_rda="../../project/rdas/topic_fit_lcl_bulk.rda",partition=c('TRUE'),path_struct = "../figures/lcl_structure_bulk");
install_github('kkdey/CountClust')
StructureObj(lcl_molecules_refined,nclus_vec,samp_metadata = samp_metadata, tol=0.1, batch_lab = NULL, path_rda="../../project/rdas/topic_fit_lcl_bulk.rda",partition=c('TRUE'),path_struct = "../figures/lcl_structure_bulk");
StructureObj(lcl_molecules_refined,nclus_vec,samp_metadata = samp_metadata, tol=0.1, batch_lab = NULL, path_rda="../../project/rdas/topic_fit_lcl_bulk.rda",partition=c('TRUE'),path_struct = "../figures/lcl_structure_bulk");
install_github('kkdey/CountClust')
library(maptpx)
StructureObj(lcl_molecules_refined,nclus_vec,samp_metadata = samp_metadata, tol=0.1, batch_lab = NULL, path_rda="../../project/rdas/topic_fit_lcl_bulk.rda",partition=c('TRUE'),path_struct = "../figures/lcl_structure_bulk");
for(num in 1:length(nclus_vec))
{
obj <- StructureObj_omega(lcl_topics_bulk[[num]]$omega, samp_metadata = samp_metadata, batch_lab = batch_lab,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct='../figures/lcl_structure_bulk',control=list(cex.axis=1));
}
nclus_vec <- 2:5;
samp_metadata <- cbind.data.frame(1:96);
colnames(samp_metadata) = c("samples");
batch_lab <- batch_lab
if(!dir.exists("../figures/lcl_structure_bulk")) dir.create("../figures/lcl_structure_bulk")
if(file.exists("../../project/rdas/topic_fit_lcl_bulk.rda")) {
lcl_topics_bulk <- get(load("../../project/rdas/topic_fit_lcl_bulk.rda"));} else {
StructureObj(lcl_molecules_refined,nclus_vec,samp_metadata = samp_metadata, tol=0.1, batch_lab = NULL, path_rda="../../project/rdas/topic_fit_lcl_bulk.rda",partition=c('TRUE'),path_struct = "../figures/lcl_structure_bulk");
}
for(num in 1:length(nclus_vec))
{
obj <- StructureObj_omega(lcl_topics_bulk[[num]]$omega, samp_metadata = samp_metadata, batch_lab = batch_lab,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct='../figures/lcl_structure_bulk',control=list(cex.axis=1));
}
for(num in 1:length(nclus_vec))
{
obj <- StructureObj_omega(as.matrix(lcl_topics_bulk[[num]]$omega), samp_metadata = samp_metadata, batch_lab = batch_lab,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct='../figures/lcl_structure_bulk',control=list(cex.axis=1));
}
num <- 1
lcl_topics_bulk[[num]]$omega
dim(lcl_topics_bulk[[num]]$omega)
batch_lab
length(batch_lab)]
length(batch_lab)
for(num in 1:length(nclus_vec))
{
obj <- StructureObj_omega(lcl_topics_bulk[[num]]$omega, samp_metadata = samp_metadata, batch_lab = batch_lab,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct='../figures/lcl_structure_bulk',control=list(cex.axis=1));
}
nclus_vec <- 2:5;
samp_metadata <- cbind.data.frame(1:88);
colnames(samp_metadata) = c("samples");
batch_lab <- batch_lab
for(num in 1:length(nclus_vec))
{
obj <- StructureObj_omega(lcl_topics_bulk[[num]]$omega, samp_metadata = samp_metadata, batch_lab = batch_lab,partition = rep("TRUE",dim(samp_metadata)[2]),path_struct='../figures/lcl_structure_bulk',control=list(cex.axis=1));
}
rm(list=ls())
setwd('/Users/kushal/Documents/singleCell-method/project/analysis')
library(CountClust)
library(data.table)
library(gplots)
library(philentropy)
library(dplyr)
library(edgeR)
library(qtlcharts)
library(limma)
library(readr)
lcl_qc_data <- read_csv("../data/qc-lcl.csv");
lcl_annotations <- read.table('../data/annotation-lcl.txt',header=TRUE);
lcl_molecules <- t(data.frame(fread('../data/molecules-lcl.txt'), row.names = 1));
lcl_indices <- match(lcl_qc_data$ll_name, lcl_annotations$well)
lcl_molecules_refined <- lcl_molecules[lcl_indices,];
lcl_annotations_refined <- lcl_annotations[lcl_indices,];
well_id <- lcl_annotations_refined$well;
ids <- sapply(well_id, function(x) substring(x,2,3))
lane_lab <- array(0, length(ids))
lane_lab[which(ids=="01" | ids=="02" | ids=="03")]=1;
lane_lab[which(ids=="04" | ids=="05" | ids=="06")]=2;
lane_lab[which(ids=="07" | ids=="08" | ids=="09")]=3;
lane_lab[which(ids=="10" | ids=="11" | ids=="12")]=4;
individual_lab_LCL <- paste0(lcl_annotations$individual[lcl_indices],"_","LCL");
lcl_single_cells <- lcl_molecules_refined[which(lcl_qc_data$cell.num==1),];
lane_lab_single_cells <- lane_lab[which(lcl_qc_data$cell.num==1)];
lane_lab_LCL <- paste0(lane_lab_single_cells,"_","LCL");
individual_lab_LCL <- individual_lab_LCL[which(lcl_qc_data$cell.num==1)];
reads_lcl <- data.frame(fread('../data/reads-lcl.txt'),row.names=TRUE);
reads_lcl <- reads_lcl[,lcl_indices];
reads_lcl_single <- reads_lcl[,which(lcl_qc_data$cell.num==1)];
reads_single <- as.matrix(reads_lcl_single)
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
## create 5 lists of 5 phases (de-level and then remove "")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
suppressWarnings(cor_matrix <- cor(t(combined_matrix)))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
flexible_normalization <- function(data_in,by_row=TRUE){
if(by_row){
row_mean <- apply(data_in,1,mean)
row_sd   <- apply(data_in,1,sd)
output <- data_in
for(i in 1:dim(data_in)[1]){
output[i,] <- (data_in[i,] - row_mean[i])/row_sd[i]
}
}
#### if by column
if(!by_row){
col_mean <- apply(data_in,2,mean)
col_sd   <- apply(data_in,2,sd)
output <- data_in
for(i in 1:dim(data_in)[2]){
output[,i] <- (data_in[,i] - col_mean[i])/col_sd[i]
}
}
output
}
#### apply the normalization function
## first normalized for each phase
ans_normed <- flexible_normalization(ans,by_row=FALSE)
## then normalized of each cell
ans_normed_normed <- flexible_normalization(ans_normed,by_row=TRUE)
cell_phase <- apply(ans_normed_normed,1,function(x) colnames(cell_cycle_genes)[which.max(x)])
assign_cell_phase <- data.frame(cell_phase)
cell_phase_vector <- as.vector(as.matrix(assign_cell_phase));
cell_phase_vector <- factor(cell_phase_vector,
levels = c("G1.S", "S", "G2.M", "M", "M.G1"))
labs=unique(unlist(lapply(1:5, function(k) match(cell_cycle_genes_list[[k]],colnames(lcl_single_cells)))));
labs = labs[!is.na(labs)];
lcl_single_cell_cycle_genes <- lcl_single_cells[,labs];
molecules_single_LCL <- t(lcl_single_cells);
cell_phase_LCL <- paste0(as.vector(as.matrix(cell_phase_vector)),"_","LCL");
dim(molecules_single_LCL)
ipsc_qc_data <- read.table("../data/qc-ipsc.txt",header=TRUE);
labs <- which(ipsc_qc_data$cell_number==1)
batch_lab_iPSC <- ipsc_qc_data$batch[labs];
well_id <- ipsc_qc_data$well[labs];
ids <- sapply(well_id, function(x) substring(x,2,3))
lane_lab <- array(0, length(ids))
lane_lab[which(ids=="01" | ids=="02" | ids=="03")]=1;
lane_lab[which(ids=="04" | ids=="05" | ids=="06")]=2;
lane_lab[which(ids=="07" | ids=="08" | ids=="09")]=3;
lane_lab[which(ids=="10" | ids=="11" | ids=="12")]=4;
lane_lab_iPSC <- paste0(lane_lab,"_","iPSC");
molecules_single <- data.frame(fread('../data/molecules.txt'),row.names=1);
qc_ids <- paste0("NA",ipsc_qc_data[,1],".",ipsc_qc_data[,2],".",ipsc_qc_data[,3]);
molecules_single <- molecules_single[,match(qc_ids,colnames(molecules_single))];
molecules_single_iPSC <- molecules_single[,labs];
individual_lab_iPSC <- ipsc_qc_data$individual[labs]
reads_single <- data.frame(fread('../data/reads.txt'),row.names=1);
reads_single <- reads_single[,labs];
ans <-
sapply(cell_cycle_genes_list,function(xx){
#### create table of each phase
reads_single_phase <- reads_single[rownames(reads_single) %in% unlist(xx) ,]
#### add average expression of all genes in the phase
combined_matrix <- rbind(reads_single_phase,average=apply(reads_single_phase,2,mean))
#### use transpose to compute cor matrix
suppressWarnings(cor_matrix <- cor(t(combined_matrix)))
#### take the numbers
cor_vector <- cor_matrix[,dim(cor_matrix)[1]]
#### restrict to correlation >= 0.3
reads_single_phase_restricted <- reads_single_phase[rownames(reads_single_phase) %in% names(cor_vector[cor_vector >= 0.3]),]
#### apply normalization to reads
norm_factors_single <- calcNormFactors(reads_single_phase_restricted, method = "TMM")
reads_single_cpm <- cpm(reads_single_phase_restricted, log = TRUE,
lib.size = colSums(reads_single) * norm_factors_single)
#### output the phase specific scores (mean of normalized expression levels in the phase)
apply(reads_single_cpm,2,mean)
})
flexible_normalization <- function(data_in,by_row=TRUE){
if(by_row){
row_mean <- apply(data_in,1,mean)
row_sd   <- apply(data_in,1,sd)
output <- data_in
for(i in 1:dim(data_in)[1]){
output[i,] <- (data_in[i,] - row_mean[i])/row_sd[i]
}
}
#### if by column
if(!by_row){
col_mean <- apply(data_in,2,mean)
col_sd   <- apply(data_in,2,sd)
output <- data_in
for(i in 1:dim(data_in)[2]){
output[,i] <- (data_in[,i] - col_mean[i])/col_sd[i]
}
}
output
}
#### apply the normalization function
## first normalized for each phase
ans_normed <- flexible_normalization(ans,by_row=FALSE)
## then normalized of each cell
ans_normed_normed <- flexible_normalization(ans_normed,by_row=TRUE)
cell_phase <- apply(ans_normed_normed,1,function(x) colnames(cell_cycle_genes)[which.max(x)])
assign_cell_phase <- data.frame(cell_phase)
cell_phase_vector <- as.vector(as.matrix(assign_cell_phase));
cell_phase_vector <- factor(cell_phase_vector,
levels = c("G1.S", "S", "G2.M", "M", "M.G1"))
cell_phase_iPSC <- paste0(as.vector(as.matrix(cell_phase_vector)),"_","iPSC");
molecules_single_pooled <- t(cbind(molecules_single_iPSC,molecules_single_LCL));
ii_nonERCC <- grep("ERCC", colnames(molecules_single_pooled), invert = TRUE)
molecules_single_pooled <- molecules_single_pooled[ , ii_nonERCC]
range(molecules_single_pooled)
ii_notOverexpressed <- apply(molecules_single_pooled, 2, function(x) any(x < 1024) )
molecules_single_pooled <- molecules_single_pooled[ , ii_notOverexpressed]
dim(molecules_single_pooled)
dim(molecules_single_LCL)
range(molecules_single_pooled)
molecules_single_pooled <- t(cbind(molecules_single_iPSC,molecules_single_LCL));
ii_nonERCC <- grep("ERCC", colnames(molecules_single_pooled), invert = TRUE)
molecules_single_pooled <- molecules_single_pooled[ , ii_nonERCC]
range(molecules_single_pooled)
ii_notOverexpressed <- apply(molecules_single_pooled, 2, function(x) any(x < 1024) )
molecules_single_pooled <- molecules_single_pooled[ , ii_notOverexpressed]
dim(molecules_single_pooled)
range(molecules_single_pooled)
max(molecules_single_pooled)
ii_notOverexpressed <- apply(molecules_single_pooled, 2, function(x) all(x < 1024) )
molecules_single_pooled <- molecules_single_pooled[ , ii_notOverexpressed]
dim(molecules_single_pooled)
range(molecules_single_pooled)
lane_lab_pooled <- c(lane_lab_iPSC,lane_lab_LCL);
indiv_lab_pooled <- c(individual_lab_iPSC, individual_lab_LCL);
batch_lab_pooled <- c(batch_lab_iPSC, rep("LCL",84));
cell_phase_pooled <- c(cell_phase_iPSC, cell_phase_LCL);
batch_indiv_pooled <- paste0(indiv_lab_pooled,".",batch_lab_pooled);
samp_metadata <- cbind.data.frame(indiv_lab_pooled, lane_lab_pooled, batch_lab_pooled, cell_phase_pooled, batch_indiv_pooled);
colnames(samp_metadata) = c("individual", "lane", "batch", "cell_phase", "indiv.batch");
if(!dir.exists("../figures/ipsc_lcl_structure")) dir.create("../figures/ipsc_lcl_structure")
nclus_vec <- 2:5;
if(file.exists("../../project/rdas/topic_fit_ipsc_lcl.rda")) {
ipsc_lcl_topics <- get(load("../../project/rdas/topic_fit_ipsc_lcl.rda"));
} else {
StructureObj(molecules_single_pooled ,nclus_vec,samp_metadata = samp_metadata, tol=0.1, batch_lab = NULL, path_rda="../../project/rdas/topic_fit_ipsc_lcl.rda",partition=c('TRUE'),path_struct = "../figures/ipsc_lcl_structure");
ipsc_lcl_topics <- get(load("../../project/rdas/topic_fit_ipsc_lcl.rda"));
}
install.packages("maptpx")
install.packages("maptpx")
rm(maptpx)
setwd('/Users/kushal/Documents/ancient-structure/src')
setwd('/Users/kushal/Documents/ancient-structure/bin')
library(data.table)
all.hwe <- data.frame(fread('all.hwe'))
dim(dall.hwe)
dim(all.hwe)
all.hwe[1,]
all.hwe <- data.frame(fread('all.hwe'),header=TRUE)
all.hwe[1,]
all.hwe <- read.table('all.hwe',header=TRUE)
all.hwe[1,]
dim(all.hwe)
data <- cbind(all.hwe$CHR,all.hwe$SNP, all.hwe$P);
dim(data)
data[1:3,]
data <- cbind.data.frame(all.hwe$CHR,all.hwe$SNP, all.hwe$P);
data[1:3,]
strsplit(all.hwe$SNP[1],":")
strsplit(as.character(all.hwe$SNP[1]),":")
strsplit(as.character(all.hwe$SNP[1]),":")[[1]][2]
as.numeric(strsplit(as.character(all.hwe$SNP[1]),":")[[1]][2])
snp_locations <- lapply(all.hwe$SNP, function(x) as.numeric(strsplit(as.character(x),":")[[1]][2]))
snp_locations
snp_locations <- unlist(lapply(all.hwe$SNP, function(x) as.numeric(strsplit(as.character(x),":")[[1]][2])))
snp_locations
length(snp_locations)
data <- cbind.data.frame(all.hwe$CHR,snp_locations,all.hwe$P);
colnames(data)=c("CHR","BP","P");
dim(data)
data[1,]
install.packages("qqman")
library(qqman)
manhattan(data)
manhattan(data)
all.hwe[1,]
manhattan(data2, suggestiveline = FALSE,genomewideline = FALSE,logp = FALSE)
data2 <- cbind.data.frame(all.hwe$CHR,snp_locations,all.hwe$O.HET.);
colnames(data2)=c("CHR","BP","P");
manhattan(data2, suggestiveline = FALSE,genomewideline = FALSE,logp = FALSE)
manhattan(data2, suggestiveline = FALSE,genomewideline = FALSE,logp = FALSE)
manhattan(data2, suggestiveline = FALSE,genomewideline = FALSE,logp = FALSE,ylab="Obs. het")
manhattan(data2, suggestiveline = FALSE,genomewideline = FALSE,logp = FALSE,
ylab="Obs. het", ylim=c(0,0.6))
all.hwe[1,]
max(all.hwe$O.HET.)
which.max(all.hwe$O.HET.)
data2[which.max(all.hwe$O.HET.),]
all.hwe[which.max(all.hwe$O.HET.),]
73/(73+187+81)
sqrt(0.2140762)
1-sqrt(0.2140762)
2*0.53*0.46
all.hwe[which.max(all.hwe$O.HET.),]
phat = (2*73 + 187)/(2*(73+187+81))
2*phat*(1-phat)
187/(187+73+81)
ata.clst <- read.csv('../exploratory/data.clst', stringsAsFactors = FALSE, header=FALSE, sep = "\t");
data.clst <- read.csv('../exploratory/data.clst', stringsAsFactors = FALSE, header=FALSE, sep = "\t");
data.clst
data.fam <- read.table('../exploratory/haak_fig3_set.fam');
pop_ids <- data.clst[match(data.fam$V2, data.clst$V2),3]
Q_data <- as.matrix(read.table("../internal_data/sample_correction/q_known_3_unknown_0.txt"));
pop_ids
pop_ids <- data.clst[match(data.fam$V2, data.clst$V2),3]
pop_ids[1]
pop_ids[1,]
pop_ids[1]
pop_ids
library(snpStats)
reads <- read.plink(bed="../external_data/haak_fig3.LDprune.bed",
bim="../external_data/haak_fig3.LDprune.bim",
fam="../external_data/haak_fig3.LDprune.fam")
gm = as(reads$genotypes, 'numeric')
dim(gm)
gm_imputed <- apply(gm,2,function(x)
{
y=x;
y[is.na(x)]=rbinom(1,2,mean(x,na.rm=TRUE)/2);
return(y);
})
which(is.na(gm_imputed))
length(which(is.na(gm)))
(length(which(is.na(gm))))/(dim(gm)[1]*dim(gm)[2])
popInfo = read.csv("../external_data/data.clst", sep = "\t", header = FALSE, stringsAsFactors=FALSE)
#popInfo_new <- popInfo[!is.na(match(popInfo[,3],c("Yamnaya","LBK_EN","Loschbour"))),];
popFam = read.csv("../external_data/haak_fig3.LDprune.fam", sep = " ", header = FALSE, stringsAsFactors=FALSE )
out <- do.call(rbind,lapply(c("Yamnaya","LBK_EN","Loschbour"), function(x)
{
fids = popInfo$V2[which(popInfo[,3] == x)]
inds = which(!is.na(match(popFam$V2,fids)))
temp <- rbind(gm[inds,],gm[inds,]); ## replicate the rows to avoid having just 1 sample
freqMat = colMeans(temp)/2;
return(freqMat)
}))
dim(out)
write.table(out, '../external_data/ancestral_freqs.txt');
length(which(is.na(out)))
gm_imputed <- read.table('../external_data/imputed_haak_fig3_genotypes.txt');
dim(gm_imputed)
write.table(gm_imputed, '../external_data/imputed_haak_fig3_genotypes.txt');
gm_imputed <- read.table('../external_data/imputed_haak_fig3_genotypes.txt');
gm_imputed <- data.frame(fread('../external_data/imputed_haak_fig3_genotypes.txt'));
dim(gm_imputed)
gm_imputed[1:3,1:3]
gm_imputed <- data.frame(fread('../external_data/imputed_haak_fig3_genotypes.txt'),row.names=1);
gm_imputed[1:3,1:3]
dim(gm_imputed)
out <- do.call(rbind,lapply(c("Yamnaya","LBK_EN","Loschbour"), function(x)
{
fids = popInfo$V2[which(popInfo[,3] == x)]
inds = which(!is.na(match(popFam$V2,fids)))
temp <- rbind(gm_imputed[inds,],gm_imputed[inds,]); ## replicate the rows to avoid having just 1 sample
freqMat = colMeans(temp)/2;
return(freqMat)
}))
length(which(is.na(out)))
write.table(out, '../external_data/ancestral_freqs.txt');
dim(out)
setwd()
getwd()
library(data.table)
K=3;
P_data <- data.frame(fread(paste0('haak_fig3.LDprune.',K,'.P')));
Q_data <- data.frame(fread(paste0('haak_fig3.LDprune.',K,'.Q')));
setwd('/Users/kushal/Documents/ancient-structure/exploratory/Admixture
')
library(data.table)
K=3;
P_data <- data.frame(fread(paste0('haak_fig3.LDprune.',K,'.P')));
Q_data <- data.frame(fread(paste0('haak_fig3.LDprune.',K,'.Q')));
P_data <- data.frame(fread(paste0('../../external_data/haak_fig3.LDprune.',K,'.P')));
P_data <- data.frame(fread(paste0('haak_fig3.LDprune.',K,'.P')));
setwd('/Users/kushal/Documents/ancient-structure/exploratory/Admixture
')
P_data <- data.frame(fread(paste0('haak_fig3.LDprune.',K,'.P')));
