diff[p]=fnorm(temp,omega_true);
}
p_star=which(diff==min(diff));
docweights=docweights[,perm_set[p_star,]];
barplot(t(docweights),col=2:(K+1),axisnames=F,space=0,border=NA,main=paste("No. of clusters=",k),las=1,ylim=c(0,1),cex.axis=1.5,cex.main=1.4)
source('example_simulation.R');
##### From now on we assume we only have the counts matrix available ##########################
source('poisson_topic_loglink.R')
### apply the main function for the modeling
out <- Poisson_topic.loglink(counts,n_clus=4,lab_batch,use_squarem = TRUE)
###
docweights=out$omega;
perm_set=rbind(1:K,allPerms(1:K));
diff=array(0,dim(perm_set)[1]);
for (p in 1:dim(perm_set)[1])
{
temp=docweights[,perm_set[p,]];
diff[p]=fnorm(temp,omega_true);
}
p_star=which(diff==min(diff));
docweights=docweights[,perm_set[p_star,]];
barplot(t(docweights),col=2:(K+1),axisnames=F,space=0,border=NA,main=paste("No. of clusters=",k),las=1,ylim=c(0,1),cex.axis=1.5,cex.main=1.4)
source('example_simulation.R');
##### From now on we assume we only have the counts matrix available ##########################
source('poisson_topic_loglink.R')
### apply the main function for the modeling
out <- Poisson_topic.loglink(counts,n_clus=4,lab_batch,use_squarem = FALSE)
docweights=out$omega;
perm_set=rbind(1:K,allPerms(1:K));
diff=array(0,dim(perm_set)[1]);
for (p in 1:dim(perm_set)[1])
{
temp=docweights[,perm_set[p,]];
diff[p]=fnorm(temp,omega_true);
}
p_star=which(diff==min(diff));
docweights=docweights[,perm_set[p_star,]];
barplot(t(docweights),col=2:(K+1),axisnames=F,space=0,border=NA,main=paste("No. of clusters=",k),las=1,ylim=c(0,1),cex.axis=1.5,cex.main=1.4)
npop=5;
nsamp_per_pop=50;
nclusters = 4
maxscale = 10
# omega is defined to be the admixture proportions
# size = nsamp * nclusters
omega = matrix(rbind(rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters))),
nrow=(T*5));
simulate_allele_freq <- function(alpha, nSNPs){
#mu = 1.25e-8
#alpha = 4*Ne*mu
beta = alpha
return(rbeta(nSNPs, shape1 = alpha, shape2 = beta))
}
# we're working with genotype data so equal number of variants across freq range
alpha <- c(1,1,1,1);
# size = nclusters x nSNPs
freq_mat <- t(matrix(unlist(lapply(1:nclusters, function(n) simulate_allele_freq(alpha[n],5))),ncol=nclusters));
simulate_binomial_model <- function(omega, freq_mat)
{
# nsamp: the number of samples
# nsites: the number of segregating sites
# omega: the topic proportion matrix (nsamp * # of topics)
# freq_mat: the allele frequencies matrix (# of topics * nsites)
# prod[1,1] = \Sum_{k=1}^{k=nclusters} omega_i,k*f(k, 1)
# where f(k,1) is the frequency of the 1st SNP for the kth cluster.
# omega_i,k is the proportion of admixture pop k contributes to individual i
prod <- omega%*%freq_mat;
sim_data <- apply(prod, c(1,2), function(x) rbinom(1,2,x))
return(sim_data)
}
data <- simulate_binomial_model(omega,freq_mat)
npop=5;
nsamp_per_pop=50;
nclusters = 4
maxscale = 10
# omega is defined to be the admixture proportions
# size = nsamp * nclusters
omega = matrix(rbind(rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters))),
nrow=(T*5));
simulate_allele_freq <- function(alpha, nSNPs){
#mu = 1.25e-8
#alpha = 4*Ne*mu
beta = alpha
return(rbeta(nSNPs, shape1 = alpha, shape2 = beta))
}
alpha <- c(1,1,1,1);
# size = nclusters x nSNPs
freq_mat <- t(matrix(unlist(lapply(1:nclusters, function(n) simulate_allele_freq(alpha[n],5))),ncol=nclusters));
simulate_binomial_model <- function(omega, freq_mat)
{
# nsamp: the number of samples
# nsites: the number of segregating sites
# omega: the topic proportion matrix (nsamp * # of topics)
# freq_mat: the allele frequencies matrix (# of topics * nsites)
# prod[1,1] = \Sum_{k=1}^{k=nclusters} omega_i,k*f(k, 1)
# where f(k,1) is the frequency of the 1st SNP for the kth cluster.
# omega_i,k is the proportion of admixture pop k contributes to individual i
prod <- omega%*%freq_mat;
sim_data <- apply(prod, c(1,2), function(x) rbinom(1,2,x))
return(sim_data)
}
data <- simulate_binomial_model(omega,freq_mat)
dim(freq_mat)
dim(omega)
omega = matrix(rbind(rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters))),
nrow=(T*5));
dim(omega)
npop=5;
nsamp_per_pop=50;
nclusters = 4
maxscale = 10
# omega is defined to be the admixture proportions
# size = nsamp * nclusters
omega = matrix(rbind(rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters))),
nrow=(n_samp_per_pop*npop));
npop=5;
nsamp_per_pop=50;
nclusters = 4
maxscale = 10
# omega is defined to be the admixture proportions
# size = nsamp * nclusters
omega = matrix(rbind(rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters))),
nrow=(nsamp_per_pop*npop));
dim(omaega)
dim(omega)
simulate_allele_freq <- function(alpha, nSNPs){
#mu = 1.25e-8
#alpha = 4*Ne*mu
beta = alpha
return(rbeta(nSNPs, shape1 = alpha, shape2 = beta))
}
# we're working with genotype data so equal number of variants across freq range
alpha <- c(1,1,1,1);
# size = nclusters x nSNPs
freq_mat <- t(matrix(unlist(lapply(1:nclusters, function(n) simulate_allele_freq(alpha[n],5))),ncol=nclusters));
simulate_binomial_model <- function(omega, freq_mat)
{
# nsamp: the number of samples
# nsites: the number of segregating sites
# omega: the topic proportion matrix (nsamp * # of topics)
# freq_mat: the allele frequencies matrix (# of topics * nsites)
# prod[1,1] = \Sum_{k=1}^{k=nclusters} omega_i,k*f(k, 1)
# where f(k,1) is the frequency of the 1st SNP for the kth cluster.
# omega_i,k is the proportion of admixture pop k contributes to individual i
prod <- omega%*%freq_mat;
sim_data <- apply(prod, c(1,2), function(x) rbinom(1,2,x))
return(sim_data)
}
data <- simulate_binomial_model(omega,freq_mat)
dim(data)
F_pooled <- freq_mat
Q <- omega
geno_data_local <- data
a <- array(0, c(dim(Q)[1], dim(F_pooled)[1], dim(F_pooled)[2]));
for(i in 1:dim(Q)[1])
{
for(j in 1:dim(F_pooled)[1])
{
a[i,j,] = geno_data_local[i,j]* (Q[i,]*F_pooled[j,])/(Q[i,]%*%F_pooled[j,]);
}
}
a_outer<- array(0, c(dim(Q)[1], dim(F_pooled)[1], dim(F_pooled)[2]));
for(i in 1:dim(Q)[1])
{
a_outer[i,,] = (geno_data_local[i,]*(Q[i,]*F_pooled))/matrix(rep(t(Q[i,]%*%t(F_pooled)),dim(F_pooled)[2]),nrow=dim(F_pooled)[1])
}
F_pooled <- t(freq_mat)
a <- array(0, c(dim(Q)[1], dim(F_pooled)[1], dim(F_pooled)[2]));
for(i in 1:dim(Q)[1])
{
for(j in 1:dim(F_pooled)[1])
{
a[i,j,] = geno_data_local[i,j]* (Q[i,]*F_pooled[j,])/(Q[i,]%*%F_pooled[j,]);
}
}
a_outer<- array(0, c(dim(Q)[1], dim(F_pooled)[1], dim(F_pooled)[2]));
for(i in 1:dim(Q)[1])
{
a_outer[i,,] = (geno_data_local[i,]*(Q[i,]*F_pooled))/matrix(rep(t(Q[i,]%*%t(F_pooled)),dim(F_pooled)[2]),nrow=dim(F_pooled)[1])
}
a[1,,]
a[1,1,]
a_outer[1,1,]
a_outer
a_outer[1,1,]
a_outer[1,2,]
a[1,2,]
dim(F_pooled)
dim(omega)
dim(Q)
dim(geno_data_local)
a <- array(0, c(dim(Q)[1], dim(F_pooled)[1], dim(F_pooled)[2]));
for(i in 1:dim(Q)[1])
{
for(j in 1:dim(F_pooled)[1])
{
a[i,j,] = geno_data_local[i,j]* (Q[i,]*F_pooled[j,])/(Q[i,]%*%F_pooled[j,]);
}
}
a[1,1,]
a_outer<- array(0, c(dim(Q)[1], dim(F_pooled)[1], dim(F_pooled)[2]));
for(i in 1:dim(Q)[1])
{
a_outer[i,,] = (geno_data_local[i,]*(Q[i,]*F_pooled))/matrix(rep(t(Q[i,]%*%t(F_pooled)),dim(F_pooled)[2]),nrow=dim(F_pooled)[1])
}
a_outer[1,4,]
a[1,4,]
Q
dim(Q)
nSNPs
freq_mat
F_pooled
rowSums(F)
rowSums(F_pooled)
rowSums(Q)
geno_data_local[1,]
geno_data_local[2,]
dim(geno_data_local)
rm(list=ls())
npop=5;
nsamp_per_pop=50;
nclusters = 4
maxscale = 10
# omega is defined to be the admixture proportions
# size = nsamp * nclusters
omega = matrix(rbind(rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters)),
rdirichlet(nsamp_per_pop,sample(1:maxscale, replace=T, nclusters))),
nrow=(nsamp_per_pop*npop));
simulate_allele_freq <- function(alpha, nSNPs){
#mu = 1.25e-8
#alpha = 4*Ne*mu
beta = alpha
return(rbeta(nSNPs, shape1 = alpha, shape2 = beta))
}
# we're working with genotype data so equal number of variants across freq range
alpha <- c(1,1,1,1);
# size = nclusters x nSNPs
freq_mat <- t(matrix(unlist(lapply(1:nclusters, function(n) simulate_allele_freq(alpha[n],nSNPs =5))),ncol=nclusters));
simulate_binomial_model <- function(omega, freq_mat)
{
# nsamp: the number of samples
# nsites: the number of segregating sites
# omega: the topic proportion matrix (nsamp * # of topics)
# freq_mat: the allele frequencies matrix (# of topics * nsites)
# prod[1,1] = \Sum_{k=1}^{k=nclusters} omega_i,k*f(k, 1)
# where f(k,1) is the frequency of the 1st SNP for the kth cluster.
# omega_i,k is the proportion of admixture pop k contributes to individual i
prod <- omega%*%freq_mat;
sim_data <- apply(prod, c(1,2), function(x) rbinom(1,2,x))
return(sim_data)
}
data <- simulate_binomial_model(omega,freq_mat)
dim(data)
dim(freq_mat)
F_pooled <-  t(freq_mat)
Q <- omega
geno_data_local <- data
a <- array(0, c(dim(Q)[1], dim(F_pooled)[1], dim(F_pooled)[2]));
for(i in 1:dim(Q)[1])
{
for(j in 1:dim(F_pooled)[1])
{
a[i,j,] = geno_data_local[i,j]* (Q[i,]*F_pooled[j,])/(Q[i,]%*%F_pooled[j,]);
}
}
a[1,1,]
sum(a[1,1,])
sum(a[1,3,])
sum(a[1,2,])
sum(a[1,7,])
sum(a[1,5,])
a_outer<- array(0, c(dim(Q)[1], dim(F_pooled)[1], dim(F_pooled)[2]));
for(i in 1:dim(Q)[1])
{
a_outer[i,,] = (geno_data_local[i,]*(Q[i,]*F_pooled))/matrix(rep(t(Q[i,]%*%t(F_pooled)),dim(F_pooled)[2]),nrow=dim(F_pooled)[1])
}
a_outer[1,1,]
a[1,1,]
a_outer[1,2,]
a[1,2,]
a_outer[1,3,]
a[1,3,]
a[1,4,]
a_outer[1,4,]
b <- array(0, c(dim(Q)[1], dim(F_pooled)[1], dim(F_pooled)[2]));
for(i in 1:dim(Q)[1])
{
for(j in 1:dim(F_pooled)[1])
{
b[i,j,] = geno_data_local[i,j]* (Q[i,]*(1-F_pooled[j,]))/(Q[i,]%*%(1-F_pooled[j,]));
}
}
b[1,1,]
b <- array(0, c(dim(Q)[1], dim(F_pooled)[1], dim(F_pooled)[2]));
for(i in 1:dim(Q)[1])
{
for(j in 1:dim(F_pooled)[1])
{
b[i,j,] = (2-geno_data_local[i,j])* (Q[i,]*(1-F_pooled[j,]))/(Q[i,]%*%(1-F_pooled[j,]));
}
}
b[1,1,]
a[1,1,]
a[1,2,]
b[1,2,]
nSNPs = dim(F_pooled)[1]
nsamp = dim(Q)[1]
nclusters = dim(F_pooled)[2]
a <- array(0, c(nsamp, nSNPs, nclusters));
for(i in 1:nsamp)
{
for(j in 1:nSNPs)
{
a[i,j,] = geno_data_local[i,j]* (Q[i,]*F_pooled[j,])/(Q[i,]%*%F_pooled[j,]);
}
}
#  a_outer<- array(0, c(dim(Q)[1], dim(F_pooled)[1], dim(F_pooled)[2]));
#  for(i in 1:dim(Q)[1])
#  {
#    a_outer[i,,] = (geno_data_local[i,]*(Q[i,]*F_pooled))/matrix(rep(t(Q[i,]%*%t(F_pooled)),dim(F_pooled)[2]),nrow=dim(F_pooled)[1])
#  }
b <- array(0, c(nsamp, nSNPs, nclusters));
for(i in 1:nsamp)
{
for(j in 1:nSNPs)
{
b[i,j,] = (2-geno_data_local[i,j])* (Q[i,]*(1-F_pooled[j,]))/(Q[i,]%*%(1-F_pooled[j,]));
}
}
f <- array(0, c(nSNPs,nclusters));
for (j in 1:nSNPs)
{
for(k in 1:nclusters){
f[j,k] <- sum(a[,j,k])/(sum(a[,j,k])+sum(b[,j,k]));
}
}
q <- array(0, c(nsamp,nclusters))
for (i in 1:nsamp)
{
for(k in 1:nclusters){
q[i,k] <- 0.5 * mean(a[i,,k]) + 0.5* mean(b[i,,k]);
}
}
q[1,]
rowSums(q)
f_pooled_in <- t(freq_mat)
q_in <- omega
nSNPs = dim(f_pooled_in)[1]
nsamp = dim(q_in)[1]
K_pooled = dim(f_pooled_in)[2]
K_known <- dim(f_known_in)[2];
K_unknown <- dim(f_unknown_in)[2];
a <- array(0, c(nsamp, nSNPs, K_pooled));
for(i in 1:nsamp)
{
for(j in 1:nSNPs)
{
a[i,j,] = geno_data_local[i,j]* (q_in[i,]*f_pooled_in[j,])/(q_in[i,]%*%f_pooled_in[j,]);
}
}
#  a_outer<- array(0, c(dim(q_in)[1], dim(f_pooled_in)[1], dim(f_pooled_in)[2]));
#  for(i in 1:dim(q_in)[1])
#  {
#    a_outer[i,,] = (geno_data_local[i,]*(q_in[i,]*f_pooled_in))/matrix(rep(t(q_in[i,]%*%t(f_pooled_in)),dim(f_pooled_in)[2]),nrow=dim(f_pooled_in)[1])
#  }
b <- array(0, c(nsamp, nSNPs, K_pooled));
for(i in 1:nsamp)
{
for(j in 1:nSNPs)
{
b[i,j,] = (2-geno_data_local[i,j])* (q_in[i,]*(1-f_pooled_in[j,]))/(q_in[i,]%*%(1-f_pooled_in[j,]));
}
}
f_unknown_out <- array(0, c(nSNPs,K_unknown));
for (j in 1:nSNPs)
{
for(k in 1:K_unknown){
f_unknown_out[j,k] <- sum(a[,j,k])/(sum(a[,j,k])+sum(b[,j,k]));
}
}
f_known_out <- f_known_in;
q_out <- array(0, c(nsamp,K_pooled))
for (i in 1:nsamp)
{
for(k in 1:K_pooled){
q_out[i,k] <- 0.5 * mean(a[i,,k]) + 0.5* mean(b[i,,k]);
}
}
f_unknown <- rep(NA,)
for (i in 1:0){
print("Haiku challenge")
}
1:0
0:0
from (i in 0:0){
print("HEY")
}
for (i in 0:0){
print("SHIT")
}
f_known = matrix(nrow = 5, ncol = 0, 0)
f_known
dim(f_known)
f_unknown = matrix(nrow = 5, ncol = 0, 0)
f_unknown
f_unknown = matrix(nrow = 5, ncol = 0)
f_unknown
f_known <- t(freq_mat)
f_pooled_in <- rbind(f_unknown_in, f_known_in);
f_known_in <- t(freq_mat)
f_unknown_in = matrix(nrow = 5, ncol = 0)
f_pooled_in <- rbind(f_unknown_in, f_known_in);
f_pooled_in <- cbind(f_unknown_in, f_known_in);
dim(f_pooled)
dim(f_pooled_in)
library("Rcpp")
library(SQUAREM)
getwd()
setwd("/Users/kushal/Documents/ancient-structure/src/")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("R_SQUAREM", type = "source")
install.packages(repos=NULL, type = "source")
install.packages("SQUAREM", repos=NULL, type = "source")
getwd()
library("Rcpp")
install.packages("R_SQUAREM", repos=NULL, type = "source")
install.packages("R_SQUAREM.cpp", repos=NULL, type = "source")
library("SQUAREM")
sourceCpp("R_SQUAREM.cpp")
sourceCpp("R_SQUAREM.cpp")
m = matrix(nrow=2, ncol = 2, runif(4))
m
as.vector(m)
help(rdichilet)
source('~/Documents/ancient-structure/src/simulate_model.R')
data
data[1,]
freq_mat
f_known = t(freq_mat)
K_unknown=0
max_iter=10000
max_iter=100
max_iter=10
geno_data
geno_data = data
source('~/Documents/ancient-structure/src/main.R')
source('~/Documents/ancient-structure/src/update_squarem.R')
source('~/Documents/ancient-structure/src/loglik_em.R')
source('~/Documents/ancient-structure/src/update_EM.R')
ancient_structure(geno_data = geno_data, f_known = f_known, K_unknown = 0, max_iter = 10)
source('~/Documents/ancient-structure/src/loglik_em.R')
ancient_structure(geno_data = geno_data, f_known = f_known, K_unknown = 0, max_iter = 10)
K_known = dim(f_known)[2]
K_pooled = K_known + K_unknown
nsamp <- dim(geno_data)[1];
nSNPs <- dim(geno_data)[2];
f_unknown_initial = matrix(nrow = nSNPs, ncol = K_unknown, runif(nSNPs*K_unknown))
q_initial = matrix(nrow = nsamp, ncol = K_pooled, rdirichlet(nsamp, rep(1/K_pooled,K_pooled)));
param_vec_in <- c(as.vector(q_initial),as.vector(f_unknown_initial),as.vector(f_known));
length(param_vec_in)
q_in = matrix(param_vec_in[(1:(nsamp*nSNPs))],nrow = nsamp, ncol = nSNPs);
dim(q_in)
K_pooled <- K_known +K_unknown;
q_in = matrix(param_vec_in[(1:(nsamp*nSNPs))],nrow = nsamp, ncol = (K_pooled));
temp <- param_vec_in[-(1:(nsamp*nSNPs))];
f_unknown_in <- matrix(temp[1:(nSNPs*K_unknown)], nrow=nSNPs, ncol=K_unknown)
f_known_in <- matrix(temp[-(1:(nSNPs*K_unknown))], nrow=nSNPs, ncol=K_known)
out <- update_EM(q_in, f_unknown_in,f_known_in,geno_data);
out <- update_EM(q_in, f_unknown_in,f_known_in,geno_data);
source('~/Documents/ancient-structure/src/update_EM.R')
out <- update_EM(q_in, f_unknown_in,f_known_in,geno_data);
source('~/Documents/ancient-structure/src/update_EM.R')
out <- update_EM(q_in, f_unknown_in,f_known_in,geno_data);
param_vec_out <- c(as.vector(out$q),as.vector(out$f_unknown),as.vector(out$f_known));
length(param_vec_out)
ancient_structure(geno_data = geno_data, f_known = f_known, K_unknown = 0, max_iter = 10)
source('~/Documents/ancient-structure/src/update_squarem.R')
q_in = matrix(param_vec_in[(1:(nsamp*nSNPs))],nrow = nsamp, ncol = nSNPs);
temp <- param_vec_in[-(1:(nsamp*nSNPs))];
f_unknown_in <- matrix(temp[1:(nSNPs*K_unknown)], nrow=nSNPs, ncol=K_unknown)
f_known_in <- matrix(temp[-(1:(nSNPs*K_unknown))], nrow=nSNPs, ncol=K_known)
f_pooled_in <- cbind(f_unknown_in, f_known_in);
prod <- q_in %*% t(f_pooled_in);
dim(q_in)
source('~/Documents/ancient-structure/src/loglik_em.R')
source('~/Documents/ancient-structure/src/simulate_model.R')
source('~/Documents/ancient-structure/src/update_EM.R')
source('~/Documents/ancient-structure/src/update_squarem.R')
ancient_structure(geno_data = geno_data, f_known = f_known, K_unknown = 0, max_iter = 10)
